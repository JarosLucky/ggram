--- –£–ø—Ä–æ—â–∞–µ—Ç –≤—ã–∑–æ–≤ API –º–µ—Ç–æ–¥–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—é message –≤–Ω—É—Ç—Ä–∏ update –æ–±—ä–µ–∫—Ç–∞.
--- –í–º–µ—Å—Ç–æ `ctx.update.message.text` –º–æ–∂–Ω–æ `ctx.text`.
--- –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã.
-- @classmod Context

local string_Split = string.Split or require("gmod.string").Split
local util_JSONToTable = (util or require("gmod.util")).JSONToTable

local CTX = {}
CTX.__index = function(self, k)
	local upd = self.update
	return upd[k] or (upd.message and upd.message[k]) -- @todo callback_query –∏ –¥—Ä—É–≥–∏–µ —É–ø—Ä–æ—â–∞—Ç—å —á–µ—Ä–µ–∑ .use
end

local function extract_args(argss)
	local tArgs = {}
	for _,arg in ipairs( string_Split(argss, " ") ) do
		if arg ~= "" then -- #todo –Ω—É–∂–Ω–æ –ª–∏?
			tArgs[#tArgs + 1] = arg
		end
	end

	return tArgs
end

local function attach_command(ctx, ent)
	local msg = ctx.update.message
	local text = msg.text

	local start = ent.offset + 2
	local endd = start + ent.length - 2
	local psc = string_Split(text:sub(start, endd), "@")
	local name = psc[1]:lower() -- /CMD@botname > cmd

	local argss = text:sub(endd + 2)
	ctx.args = function() return extract_args(argss) end
	ctx.username = psc[2]
	ctx.command = name

	if ctx.username then
		ctx.mine = ctx.bot.username and ctx.bot.username:lower() == ctx.username:lower()
		ctx.exclusive = ctx.mine
	else
		ctx.mine = true
		ctx.exclusive = msg.chat.type == "private"
	end
end

--[[
	Example for /cmd@name_bot a b c

	ctx.args() > {a, b, c}
	ctx.username > name_bot
	ctx.command > cmd

	ctx.mine determines if this command exactly for this bot or either
	ctx.exclusive 100% for me or another candidates are possible?

	@todo rename to extend_command.lua. Move out ctx.reply = ctx.bot.reply(msg.chat.id)
]]
local extend_message = function(ctx)
	local msg = ctx.update.message
	for _,ent in ipairs(msg.entities or {}) do
		if ent.type == "bot_command" then
			attach_command(ctx, ent)
			break -- —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è, —Ç.–∫. –≤ –∞—Ç—Ç–∞—á–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
		end
	end
end

--- Adds the ctx.reply, ctx.json and ctx.answer helpers to ctx object
local extend_callback = function(ctx)
	local cbq = ctx.callback_query

	ctx.json = function()
		return util_JSONToTable(cbq.data)
	end

	ctx.answer = function(options)
		options = options or {}

		return ctx.bot.call_method("answerCallbackQuery", {
			callback_query_id = cbq.id,
			text              = options.text,
			show_alert        = options.alert,
			url               = options.url,
			cache_time        = options.cache_time,
		})
	end
end

--- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç update –æ—Ç Telegram –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ ctx
--- @treturn .ctx Context object
function CTX:new(bot, UPD)
	local ctx = setmetatable({
		bot    = bot,
		update = UPD,
	}, CTX)

	if ctx.update.message then
		ctx.reply = ctx.bot.reply(ctx.update.message.chat.id)
		extend_message(ctx)
	elseif ctx.update.callback_query then
		local cbq = ctx.update.callback_query
		ctx.reply = cbq.message and ctx.bot.reply(cbq.message.chat.id)
		extend_callback(ctx)
	end

	return ctx
end


--- –°–∞–º ctx –æ–±—ä–µ–∫—Ç.
--- –≠—Ç–æ —Ç–æ, —á—Ç–æ –º—ã –≤–∏–¥–∏–º –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö, –∫–æ–≥–¥–∞ –ø–∏—à–µ–º `bot.command("cmd", function(ctx) end)` -- –≤–æ—Ç —Ç—É—Ç ctx
-- @table .ctx
-- @tfield table update –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π update –æ–±—ä–µ–∫—Ç –æ—Ç Telegram
-- @tfield Bot bot –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–æ ctx.bot –≤–º–µ—Å—Ç–æ self
-- @tfield Reply reply üî• –±—ã—Å—Ç—Ä—ã–π API –∑–∞–ø—Ä–æ—Å (`ctx.reply.text("hello")`). Alias for ctx.bot.reply(ctx.chat.id)
-- @tfield[opt] string command –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —á–µ—Ä–µ–∑ ctx.command –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –î–ª—è /TEST@botname .command –±—É–¥–µ—Ç == "test"
-- @tfield[opt] string username `/TEST@botname` > `"botname"`
-- @tfield[opt] func args `/TEST@botname a b c` > `{"a", "b", "c"}`
-- @tfield[opt] bool mine –∞–¥—Ä–µ—Å–æ–≤–∞–ª–∞—Å—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –±–æ—Ç—É. –ï—Å–ª–∏ –Ω–∞—à –±–æ—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è @ourbot, —Ç–æ –¥–ª—è /cmd@otherbot .mine –±—É–¥–µ—Ç false. –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑—ã–≤–∞–ª—Å—è, —Ç–æ mine –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ true
-- @tfield[opt] bool exclusive –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Å @botname, —Ç–æ .exclusive == .mine. –ï—Å–ª–∏ –±–µ–∑ @botname, —Ç–æ .exclusive == true, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –±–æ—Ç—É –≤ –õ–°
-- @tfield[opt] func json –¥–ª—è `callback_query` –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç json —Å .data –≤ —Ç–∞–±–ª–∏—Ü—É
-- @tfield[opt] func answer –¥–ª—è `callback_query` —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ API answerCallbackQuery. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ª—É—á—à–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ `ggram/context.lua`

return CTX
